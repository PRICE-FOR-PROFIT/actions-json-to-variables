{
  "_from": "@actions/github",
  "_id": "@actions/github@4.0.0",
  "_inBundle": false,
  "_integrity": "sha512-Ej/Y2E+VV6sR9X7pWL5F3VgEWrABaT292DRqRU6R4hnQjPtC/zD3nagxVdXWiRQvYDh8kHXo7IDmG42eJ/dOMA==",
  "_location": "/@actions/github",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "@actions%2fgithub",
    "fetchSpec": "latest",
    "name": "@actions/github",
    "raw": "@actions/github",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "scope": "@actions",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/@actions/github/-/github-4.0.0.tgz",
  "_shasum": "d520483151a2bf5d2dc9cd0f20f9ac3a2e458816",
  "_shrinkwrap": null,
  "_spec": "@actions/github",
  "_where": "C:\\Projects\\json-to-variables",
  "bugs": {
    "url": "https://github.com/actions/toolkit/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "@actions/http-client": "^1.0.8",
    "@octokit/core": "^3.0.0",
    "@octokit/plugin-paginate-rest": "^2.2.3",
    "@octokit/plugin-rest-endpoint-methods": "^4.0.0"
  },
  "deprecated": false,
  "description": "Actions github lib",
  "devDependencies": {
    "jest": "^25.1.0",
    "proxy": "^1.0.1"
  },
  "directories": {
    "lib": "lib",
    "test": "__tests__"
  },
  "files": [
    "!.DS_Store",
    "lib"
  ],
  "homepage": "https://github.com/actions/toolkit/tree/master/packages/github",
  "keywords": [
    "actions",
    "github"
  ],
  "license": "MIT",
  "main": "lib/github.js",
  "name": "@actions/github",
  "optionalDependencies": {},
  "publishConfig": {
    "access": "public"
  },
  "readme": "# `@actions/github`\n\n> A hydrated Octokit client.\n\n## Usage\n\nReturns an authenticated Octokit client that follows the machine [proxy settings](https://help.github.com/en/actions/hosting-your-own-runners/using-a-proxy-server-with-self-hosted-runners) and correctly sets GHES base urls. See https://octokit.github.io/rest.js for the API.\n\n```js\nconst github = require('@actions/github');\nconst core = require('@actions/core');\n\nasync function run() {\n    // This should be a token with access to your repository scoped in as a secret.\n    // The YML workflow will need to set myToken with the GitHub Secret Token\n    // myToken: ${{ secrets.GITHUB_TOKEN }}\n    // https://help.github.com/en/actions/automating-your-workflow-with-github-actions/authenticating-with-the-github_token#about-the-github_token-secret\n    const myToken = core.getInput('myToken');\n\n    const octokit = github.getOctokit(myToken)\n\n    // You can also pass in additional options as a second parameter to getOctokit\n    // const octokit = github.getOctokit(myToken, {userAgent: \"MyActionVersion1\"});\n\n    const { data: pullRequest } = await octokit.pulls.get({\n        owner: 'octokit',\n        repo: 'rest.js',\n        pull_number: 123,\n        mediaType: {\n          format: 'diff'\n        }\n    });\n\n    console.log(pullRequest);\n}\n\nrun();\n```\n\nYou can also make GraphQL requests. See https://github.com/octokit/graphql.js for the API.\n\n```js\nconst result = await octokit.graphql(query, variables);\n```\n\nFinally, you can get the context of the current action:\n\n```js\nconst github = require('@actions/github');\n\nconst context = github.context;\n\nconst newIssue = await octokit.issues.create({\n  ...context.repo,\n  title: 'New issue!',\n  body: 'Hello Universe!'\n});\n```\n\n## Webhook payload typescript definitions\n\nThe npm module `@octokit/webhooks` provides type definitions for the response payloads. You can cast the payload to these types for better type information.\n\nFirst, install the npm module `npm install @octokit/webhooks`\n\nThen, assert the type based on the eventName\n```ts\nimport * as core from '@actions/core'\nimport * as github from '@actions/github'\nimport * as Webhooks from '@octokit/webhooks'\nif (github.context.eventName === 'push') {\n  const pushPayload = github.context.payload as Webhooks.WebhookPayloadPush\n  core.info(`The head commit is: ${pushPayload.head}`)\n}\n```\n\n## Extending the Octokit instance\n`@octokit/core` now supports the [plugin architecture](https://github.com/octokit/core.js#plugins). You can extend the GitHub instance using plugins. \n\nFor example, using the `@octokit/plugin-enterprise-server` you can now access enterprise admin apis on GHES instances.\n\n```ts\nimport { GitHub, getOctokitOptions } from '@actions/github/lib/utils'\nimport { enterpriseServer220Admin } from '@octokit/plugin-enterprise-server'\n\nconst octokit = GitHub.plugin(enterpriseServer220Admin)\n// or override some of the default values as well \n// const octokit = GitHub.plugin(enterpriseServer220Admin).defaults({userAgent: \"MyNewUserAgent\"})\n\nconst myToken = core.getInput('myToken');\nconst myOctokit = new octokit(getOctokitOptions(token))\n// Create a new user\nmyOctokit.enterpriseAdmin.createUser({\n  login: \"testuser\",\n  email: \"testuser@test.com\",\n});\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "directory": "packages/github",
    "type": "git",
    "url": "git+https://github.com/actions/toolkit.git"
  },
  "scripts": {
    "audit-moderate": "npm install && npm audit --audit-level=moderate",
    "build": "tsc",
    "format": "prettier --write **/*.ts",
    "format-check": "prettier --check **/*.ts",
    "test": "jest",
    "tsc": "tsc"
  },
  "types": "lib/github.d.ts",
  "version": "4.0.0"
}
